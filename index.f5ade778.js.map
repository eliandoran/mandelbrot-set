{"mappings":"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","sources":["./src/lib/color_schemes.js","./src/script.js","./src/lib/config_pane.js","./src/lib/selection.js"],"sourcesContent":["export default {\n    hsl_red: {\n        title: \"Red (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(0, 100%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    hsl_blue: {\n        title: \"Blue (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(200, 100%, ${percentage * 100}%)`;\n            };\n        }\n    },\n    greyscale: {\n        title: \"Greyscale\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                let comp = (255 * percentage);\n                ctx.fillStyle = `rgb(${comp}, ${comp}, ${comp})`;\n            };\n        }\n    }\n}","import colorSchemes from \"./lib/color_schemes\";\nimport { initializeConfigPane } from \"./lib/config_pane\";\n\nconst infoPaneEl = document.getElementById(\"info-pane\");\n\nfunction getMandelbrotSetPercentage(numIterations, x, y) {\n    let resultReal = x;\n    let resultImag = y;\n    for (let i=0; i<numIterations; i++) {\n        const tempReal = (resultReal * resultReal - resultImag * resultImag + x);\n        const tempImag = (2 * resultReal * resultImag + y);\n        resultReal = tempReal;\n        resultImag = tempImag;        \n\n        if (resultReal * resultImag > 5) {\n            return (i / numIterations);\n        }\n    }\n\n    return 0;\n}\n\nfunction draw(canvasEl, config) {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    \n    // Adjust canvas size.\n    canvasEl.width = width;\n    canvasEl.height = height;\n\n    const scheme = config.scheme;\n    const numIterations = config.numIterations;\n\n    const ctx = canvasEl.getContext(\"2d\");\n    const styleFn = colorSchemes[scheme].getColorScheme(ctx);\n\n    // Fill with blank color.\n    ctx.fillStyle = \"#00000\";\n    ctx.fillRect(0, 0, width, height);\n\n    const magnificationFactor = config.magnificationFactor;\n    const panX = config.panX;\n    const panY = config.panY;    \n    \n    const stepSize = 10;\n\n    for (let baseY = 0; baseY < height; baseY += stepSize) {\n        setTimeout(() => {\n            for (let y = baseY; y < baseY + stepSize; y++) {\n                for (let x=0; x < width; x++) {\n                    const absX = (x / magnificationFactor - panX);\n                    const absY = (y / magnificationFactor - panY);\n                    const percentage = getMandelbrotSetPercentage(numIterations, absX, absY);\n                    styleFn(percentage);\n                    ctx.fillRect(x, y, 1, 1);\n                }\n            }\n        }, 0);\n    }\n\n    const firstX = (0 / magnificationFactor - panX);\n    const firstY = (0 / magnificationFactor - panY);\n    const lastX = (width / magnificationFactor - panX);\n    const lastY = (height / magnificationFactor - panX);\n\n    const infoFields = [\n        `Viewport size: ${width}x${height}`,\n        `Magnification factor: ${magnificationFactor.toFixed(2)}`,\n        `Pan: (${panX.toFixed(4)}, ${panY.toFixed(4)})`,\n        `Abs. coords: (${firstX.toFixed(4)} ${firstY.toFixed(4)}) (${lastX.toFixed(4)} ${lastY.toFixed(4)})`\n    ];    \n    infoPaneEl.innerHTML = infoFields.join(\"<br/>\");\n}\n\nconst canvasEl = document.getElementById(\"drawing\");\ninitializeConfigPane({\n    canvasEl,\n    draw\n});","import colorSchemes from \"./color_schemes\";\nimport initializeSelection from \"./selection\";\n\nconst MAGNIFICATION_DEFAULT = 250;\nconst MAGNIFICATION_STEP = 50;\nconst MAGNIFICATION_PAN_STEP = 0.2;\nconst PAN_DEFAULT_X = 2;\nconst PAN_DEFAULT_Y = 1.5;\n\nexport function initializeConfigPane(config) {    \n    const canvasEl = config.canvasEl;\n    const colorSchemeEl = document.getElementById(\"color-scheme\");\n    const zoomInEl = document.getElementById(\"zoom-in\");\n    const zoomOutEl = document.getElementById(\"zoom-out\");\n    const zoomResetEl = document.getElementById(\"zoom-reset\");\n    const selectionEl = document.getElementById(\"selection\");\n    const numIterationsValueEl = document.getElementById(\"num-iterations-value\");\n    const numIterationsButtonEl = document.getElementById(\"num-iterations-button\");\n\n    const drawConfig = {\n        numIterations: 100,\n        magnificationFactor: MAGNIFICATION_DEFAULT,\n        panX: PAN_DEFAULT_X,\n        panY: PAN_DEFAULT_Y,\n        scheme: \"hsl_blue\"\n    }\n\n    function redraw() {\n        setTimeout(() => {\n            config.draw(canvasEl, drawConfig);\n        }, 0);\n    }\n\n    function setColorSchemes() {\n        const currentScheme = drawConfig.scheme;\n        colorSchemeEl.innerHTML = \"\";\n\n        for (const colorScheme of Object.keys(colorSchemes)) {            \n            const optionEl = document.createElement(\"option\");\n            optionEl.innerText = colorSchemes[colorScheme].title;\n            optionEl.value = colorScheme;\n            optionEl.selected = (colorScheme === currentScheme);\n\n            colorSchemeEl.appendChild(optionEl);\n        }\n    }    \n\n    function onColorSchemeChange(e) {\n        const scheme = e.target.value;\n        drawConfig.scheme = scheme;\n        redraw();\n    }\n\n    initializeSelection(canvasEl, selectionEl, (data) => {\n        const magnificationFactor = drawConfig.magnificationFactor;\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const panY = drawConfig.panY;\n\n        const actX = (data.x * magnificationFactor - drawConfig.panX);\n        const actY = (data.y * magnificationFactor - drawConfig.panY);\n\n        const actWidth = (data.width * magnificationFactor);        \n        const fact = (actX + actWidth) / actX;\n\n        console.log(\"Actual\", actX, actY, actWidth, fact);\n\n        drawConfig.panX -= (data.x / magnificationFactor);\n        drawConfig.panY -= (data.y / magnificationFactor);\n        drawConfig.magnificationFactor += magnificationFactor * fact;\n        redraw();\n\n        console.log(data);\n    });\n\n    // Populate with data.\n    setColorSchemes();    \n    numIterationsValueEl.value = drawConfig.numIterations;\n\n    // Listen for event changes.\n    colorSchemeEl.onchange = onColorSchemeChange;\n    \n    zoomInEl.onclick = () => {\n        drawConfig.magnificationFactor += MAGNIFICATION_STEP;\n        drawConfig.panX += 0;\n        drawConfig.panY += 0;\n        redraw();\n    }\n\n    zoomOutEl.onclick = () => {\n        drawConfig.magnificationFactor -= MAGNIFICATION_STEP;\n        drawConfig.panX -= MAGNIFICATION_PAN_STEP;\n        drawConfig.panY -= MAGNIFICATION_PAN_STEP;\n        redraw();\n    }\n\n    zoomResetEl.onclick = () => {\n        drawConfig.magnificationFactor = MAGNIFICATION_DEFAULT;\n        drawConfig.panX = PAN_DEFAULT_X;\n        drawConfig.panY = PAN_DEFAULT_Y;\n        redraw();\n    }\n\n    numIterationsButtonEl.onclick = (e) => {\n        const numIterations = parseInt(numIterationsValueEl.value, 10);\n        if (numIterations > 0) {\n            drawConfig.numIterations = numIterations;\n            redraw();\n        }\n    };\n\n    // Do a first draw.\n    redraw();\n}","export default function initializeSelection(canvasEl, selectionEl, callback) {\n    let isHolding = false;\n    let originX;\n    let originY;\n\n    let selectionVisible = false;\n    let selectionX = 0;\n    let selectionY = 0;\n    let selectionWidth = 0;\n    let selectionHeight = 0;\n\n    function updateStyle() {\n        if (!isHolding) {\n            if (selectionVisible) {\n                selectionEl.style.display = \"hidden\";\n            }\n\n            return;\n        }\n\n        if (!selectionVisible) {\n            selectionEl.style.display = \"block\";\n        }\n\n        selectionEl.style.left = `${selectionX}px`;\n        selectionEl.style.top = `${selectionY}px`;\n        selectionEl.style.width = `${selectionWidth}px`;\n        selectionEl.style.height = `${selectionHeight}px`;\n    }\n\n    canvasEl.addEventListener(\"mousedown\", (e) => {\n        const x = e.clientX;\n        const y = e.clientY;\n        \n        isHolding = true;\n        selectionX = x;\n        selectionY = y;\n        selectionWidth = 0;\n        selectionHeight = 0;\n        updateStyle();\n\n        originX = x;\n        originY = y;\n    });\n\n    canvasEl.addEventListener(\"mousemove\", (e) => {\n        if (!isHolding) {\n            return;\n        }\n\n        const x = e.clientX;\n        const y = e.clientY;\n\n        if (x >= originX) {\n            const deltaX = (x - originX);\n            selectionX = originX;\n            selectionWidth = deltaX;\n        } else {\n            const deltaX = (originX - x);\n            selectionX = x;\n            selectionWidth = deltaX;\n        }     \n\n        if (y >= originY) {\n            const deltaY = (y - originY);\n            selectionY = originY;\n            selectionHeight = deltaY;\n        } else {\n            const deltaY = (originY - y);\n            selectionY = y;\n            selectionHeight = deltaY;\n        }\n\n        updateStyle();\n    });\n\n    canvasEl.addEventListener(\"mouseup\", (e) => {        \n        selectionEl.style.display = \"none\";\n        isHolding = false;\n        updateStyle();\n\n        callback({\n            x: selectionX,\n            y: selectionY,\n            width: selectionWidth,\n            height: selectionHeight\n        });\n    });\n}"],"names":["hsl_red","title","getColorScheme","ctx","percentage","fillStyle","hsl_blue","greyscale","comp","$ab82335d0333bc61684b565fa6955dcc$var$infoPaneEl","document","getElementById","$ab82335d0333bc61684b565fa6955dcc$var$getMandelbrotSetPercentage","numIterations","x","y","resultReal","resultImag","i","tempImag","config","canvasEl","colorSchemeEl","zoomInEl","zoomOutEl","zoomResetEl","selectionEl","numIterationsValueEl","numIterationsButtonEl","drawConfig","magnificationFactor","panX","panY","scheme","redraw","setTimeout","draw","callback","originX","originY","isHolding","selectionX","selectionY","selectionWidth","selectionHeight","updateStyle","style","display","left","top","width","height","addEventListener","e","clientX","clientY","data","actX","window","innerWidth","innerHeight","actY","actWidth","fact","console","log","currentScheme","innerHTML","colorScheme","Object","keys","optionEl","createElement","innerText","value","selected","appendChild","setColorSchemes","onchange","target","onclick","parseInt","getContext","styleFn","fillRect","baseY","firstX","firstY","lastX","lastY","infoFields","toFixed","join"],"version":3,"file":"index.f5ade778.js.map"}