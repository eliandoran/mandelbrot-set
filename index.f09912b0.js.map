{"mappings":"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","sources":["./src/lib/color_schemes.js","./src/lib/drawing.js","./src/lib/config_pane.js","./src/lib/selection.js","./src/script.js"],"sourcesContent":["export default {\n    hsl_red: {\n        title: \"Red (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(0, 100%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    hsl_blue: {\n        title: \"Blue (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(200, 100%, ${percentage * 100}%)`;\n            };\n        }\n    },\n    greyscale: {\n        title: \"Greyscale\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                let comp = (255 * percentage);\n                ctx.fillStyle = `rgb(${comp}, ${comp}, ${comp})`;\n            };\n        }\n    }\n}","import colorSchemes from \"./color_schemes\";\n\nfunction getMandelbrotSetPercentage(numIterations, x, y) {\n    let resultReal = x;\n    let resultImag = y;\n    for (let i=0; i<numIterations; i++) {\n        const tempReal = (resultReal * resultReal - resultImag * resultImag + x);\n        const tempImag = (2 * resultReal * resultImag + y);\n        resultReal = tempReal;\n        resultImag = tempImag;        \n\n        if (resultReal * resultImag > 5) {\n            return (i / numIterations);\n        }\n    }\n\n    return 0;\n}\n\nexport default function draw(canvasEl, config) {\n    const infoPaneEl = document.getElementById(\"info-pane\");\n\n    canvasEl.className = \"loading\";\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    \n    // Adjust canvas size.\n    canvasEl.width = width;\n    canvasEl.height = height;\n\n    const scheme = config.scheme;\n    const numIterations = config.numIterations;\n\n    const ctx = canvasEl.getContext(\"2d\", {\n        alpha: false\n    });\n    const styleFn = colorSchemes[scheme].getColorScheme(ctx);\n\n    const renderStart = Date.now();\n\n    // Fill with blank color.\n    ctx.fillStyle = \"#00000\";\n    ctx.fillRect(0, 0, width, height);\n\n    const magnificationFactor = config.magnificationFactor;\n    const panX = config.panX;\n    const panY = config.panY;    \n    \n    const stepSize = 10;\n\n    function setInfoPanel(rows) {\n        infoPaneEl.innerHTML = rows.join(\"<br/>\");\n    }\n\n    function displayLoadingInfo(progress) {\n        setInfoPanel([\n            `Rendering Mandelbrot Set...`,\n            `${Math.round(progress * 100)}%`\n        ]);\n    }\n    \n    function displayLoadedInfo() {\n        const firstX = (0 / magnificationFactor - panX);\n        const firstY = (0 / magnificationFactor - panY);\n        const lastX = (width / magnificationFactor - panX);\n        const lastY = (height / magnificationFactor - panX);\n        const timeSpent = Date.now() - renderStart;\n    \n        setInfoPanel([\n            `Viewport size: ${width}x${height}`,\n            `Magnification factor: ${magnificationFactor.toFixed(2)}`,\n            `Pan: (${panX.toFixed(4)}, ${panY.toFixed(4)})`,\n            `Abs. coords: (${firstX.toFixed(4)} ${firstY.toFixed(4)}) (${lastX.toFixed(4)} ${lastY.toFixed(4)})`,\n            `Render time: ${timeSpent} ms`\n        ]);\n    }\n\n    const lastStepY = Math.floor(height / stepSize)\n    for (let baseY = 0; baseY < height; baseY += stepSize) {\n        setTimeout(() => {\n            for (let y = baseY; y < baseY + stepSize; y++) {\n                for (let x=0; x < width; x++) {\n                    const absX = (x / magnificationFactor - panX);\n                    const absY = (y / magnificationFactor - panY);\n                    const percentage = getMandelbrotSetPercentage(numIterations, absX, absY);\n                    styleFn(percentage);\n                    ctx.fillRect(x, y, 1, 1);\n                }\n\n                // Check if drawing finished.\n                if (y >= lastStepY) {\n                    canvasEl.className = \"\";\n                    displayLoadedInfo();\n                } else {\n                    const progress = (baseY / height);\n                    displayLoadingInfo(progress);\n                }\n            }\n        }, 0);\n    }\n    \n    displayLoadingInfo(0);\n}","import colorSchemes from \"./color_schemes\";\nimport initializeSelection from \"./selection\";\n\nconst MAGNIFICATION_DEFAULT = 250;\nconst MAGNIFICATION_STEP = 50;\nconst MAGNIFICATION_PAN_STEP = 0.2;\nconst PAN_DEFAULT_X = 2;\nconst PAN_DEFAULT_Y = 1.5;\n\nexport default function initializeConfigPane(config) {    \n    const canvasEl = config.canvasEl;\n    const colorSchemeEl = document.getElementById(\"color-scheme\");\n    const zoomInEl = document.getElementById(\"zoom-in\");\n    const zoomOutEl = document.getElementById(\"zoom-out\");\n    const zoomResetEl = document.getElementById(\"zoom-reset\");\n    const selectionEl = document.getElementById(\"selection\");\n    const numIterationsValueEl = document.getElementById(\"num-iterations-value\");\n    const numIterationsButtonEl = document.getElementById(\"num-iterations-button\");\n\n    const drawConfig = {\n        numIterations: 100,\n        magnificationFactor: MAGNIFICATION_DEFAULT,\n        panX: PAN_DEFAULT_X,\n        panY: PAN_DEFAULT_Y,\n        scheme: \"hsl_blue\"\n    }\n\n    function redraw() {\n        setTimeout(() => {\n            config.draw(canvasEl, drawConfig);\n        }, 0);\n    }\n\n    function setColorSchemes() {\n        const currentScheme = drawConfig.scheme;\n        colorSchemeEl.innerHTML = \"\";\n\n        for (const colorScheme of Object.keys(colorSchemes)) {            \n            const optionEl = document.createElement(\"option\");\n            optionEl.innerText = colorSchemes[colorScheme].title;\n            optionEl.value = colorScheme;\n            optionEl.selected = (colorScheme === currentScheme);\n\n            colorSchemeEl.appendChild(optionEl);\n        }\n    }    \n\n    function onColorSchemeChange(e) {\n        const scheme = e.target.value;\n        drawConfig.scheme = scheme;\n        redraw();\n    }\n\n    initializeSelection(canvasEl, selectionEl, (data) => {\n        const magnificationFactor = drawConfig.magnificationFactor;\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const panY = drawConfig.panY;\n\n        const actX = (data.x * magnificationFactor - drawConfig.panX);\n        const actY = (data.y * magnificationFactor - drawConfig.panY);\n\n        const actWidth = (data.width * magnificationFactor);        \n        const fact = (actX + actWidth) / actX;\n\n        drawConfig.panX -= (data.x / magnificationFactor);\n        drawConfig.panY -= (data.y / magnificationFactor);\n        drawConfig.magnificationFactor += magnificationFactor * fact;\n        redraw();\n    });\n\n    // Populate with data.\n    setColorSchemes();    \n    numIterationsValueEl.value = drawConfig.numIterations;\n\n    // Listen for event changes.\n    colorSchemeEl.onchange = onColorSchemeChange;\n    \n    zoomInEl.onclick = () => {\n        drawConfig.magnificationFactor += MAGNIFICATION_STEP;\n        drawConfig.panX += 0;\n        drawConfig.panY += 0;\n        redraw();\n    }\n\n    zoomOutEl.onclick = () => {\n        drawConfig.magnificationFactor -= MAGNIFICATION_STEP;\n        drawConfig.panX -= MAGNIFICATION_PAN_STEP;\n        drawConfig.panY -= MAGNIFICATION_PAN_STEP;\n        redraw();\n    }\n\n    zoomResetEl.onclick = () => {\n        drawConfig.magnificationFactor = MAGNIFICATION_DEFAULT;\n        drawConfig.panX = PAN_DEFAULT_X;\n        drawConfig.panY = PAN_DEFAULT_Y;\n        redraw();\n    }\n\n    numIterationsButtonEl.onclick = (e) => {\n        const numIterations = parseInt(numIterationsValueEl.value, 10);\n        if (numIterations > 0) {\n            drawConfig.numIterations = numIterations;\n            redraw();\n        }\n    };\n\n    // Do a first draw.\n    redraw();\n}","const DRAG_MIN_WIDTH = 20;\nconst DRAG_MIN_HEIGHT = 20;\n\nexport default function initializeSelection(canvasEl, selectionEl, callback) {\n    let isHolding = false;\n    let originX;\n    let originY;\n\n    let selectionVisible = false;\n    let selectionX = 0;\n    let selectionY = 0;\n    let selectionWidth = 0;\n    let selectionHeight = 0;\n\n    function updateStyle() {\n        if (!isHolding) {\n            if (selectionVisible) {\n                selectionEl.style.display = \"hidden\";\n            }\n\n            return;\n        }\n\n        if (!selectionVisible) {\n            selectionEl.style.display = \"block\";\n        }\n\n        selectionEl.style.left = `${selectionX}px`;\n        selectionEl.style.top = `${selectionY}px`;\n        selectionEl.style.width = `${selectionWidth}px`;\n        selectionEl.style.height = `${selectionHeight}px`;\n    }\n\n    function getPointerPosition(e) {\n        if (e.clientX && e.clientY) {\n            return {\n                x: e.clientX,\n                y: e.clientY\n            }\n        }\n\n        if (e.targetTouches && e.targetTouches.length > 0) {\n            return {\n                x: e.targetTouches[0].clientX,\n                y: e.targetTouches[0].clientY\n            }\n        }\n\n        return null;\n    }\n\n    function onPointerDown(e) {\n        const { x, y } = getPointerPosition(e);\n        \n        isHolding = true;\n        selectionX = x;\n        selectionY = y;\n        selectionWidth = 0;\n        selectionHeight = 0;\n        updateStyle();\n\n        originX = x;\n        originY = y;\n    }\n    \n    function onPointerMove(e) {\n        if (!isHolding) {\n            return;\n        }\n\n        const { x, y } = getPointerPosition(e);\n\n        if (x >= originX) {\n            const deltaX = (x - originX);\n            selectionX = originX;\n            selectionWidth = deltaX;\n        } else {\n            const deltaX = (originX - x);\n            selectionX = x;\n            selectionWidth = deltaX;\n        }     \n\n        if (y >= originY) {\n            const deltaY = (y - originY);\n            selectionY = originY;\n            selectionHeight = deltaY;\n        } else {\n            const deltaY = (originY - y);\n            selectionY = y;\n            selectionHeight = deltaY;\n        }\n\n        updateStyle();\n    }\n\n    function onPointerUp(e) {\n        selectionEl.style.display = \"none\";\n        isHolding = false;\n        updateStyle();\n\n        if (selectionWidth >= DRAG_MIN_WIDTH && selectionHeight >= DRAG_MIN_HEIGHT) {\n            callback({\n                x: selectionX,\n                y: selectionY,\n                width: selectionWidth,\n                height: selectionHeight\n            });\n        }\n    }\n\n    canvasEl.addEventListener(\"mousedown\", onPointerDown);\n    canvasEl.addEventListener(\"mousemove\", onPointerMove);\n    canvasEl.addEventListener(\"mouseup\", onPointerUp);\n\n    canvasEl.addEventListener(\"touchstart\", onPointerDown);\n    canvasEl.addEventListener(\"touchmove\", onPointerMove);\n    canvasEl.addEventListener(\"touchend\", onPointerUp);\n}","import draw from \"./lib/drawing\";\nimport initializeConfigPane from \"./lib/config_pane\";\n\nconst canvasEl = document.getElementById(\"drawing\");\ninitializeConfigPane({\n    canvasEl,\n    draw\n});"],"names":["hsl_red","title","getColorScheme","ctx","percentage","fillStyle","hsl_blue","greyscale","comp","$0c7e0cee1c3848bba822eb831a16164e$var$getMandelbrotSetPercentage","numIterations","x","y","resultReal","resultImag","i","tempImag","config","canvasEl","colorSchemeEl","document","getElementById","zoomInEl","zoomOutEl","zoomResetEl","selectionEl","numIterationsValueEl","numIterationsButtonEl","drawConfig","magnificationFactor","panX","panY","scheme","redraw","setTimeout","draw","callback","originX","originY","isHolding","selectionX","selectionY","selectionWidth","selectionHeight","updateStyle","style","display","left","top","width","height","getPointerPosition","e","clientX","clientY","targetTouches","length","onPointerDown","onPointerMove","onPointerUp","addEventListener","data","actX","window","innerWidth","innerHeight","fact","currentScheme","innerHTML","colorScheme","Object","keys","optionEl","createElement","innerText","value","selected","appendChild","setColorSchemes","onchange","target","onclick","parseInt","infoPaneEl","className","getContext","alpha","styleFn","renderStart","Date","now","fillRect","setInfoPanel","rows","join","displayLoadingInfo","progress","Math","round","displayLoadedInfo","firstX","firstY","lastX","lastY","timeSpent","toFixed","lastStepY","floor","baseY"],"version":3,"file":"index.f09912b0.js.map"}