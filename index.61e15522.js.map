{"mappings":"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","sources":["./src/lib/color_schemes.js","./src/lib/drawing.js","./src/lib/config_pane.js","./src/lib/selection.js","./src/script.js"],"sourcesContent":["export default {\n    hsl_red: {\n        title: \"Red (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(0, 90%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    hsl_green: {\n        title: \"Green (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(150, 90%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    hsl_cyan: {\n        title: \"Cyan (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(190, 90%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    hsl_blue: {\n        title: \"Blue (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(210, 90%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    hsl_purple: {\n        title: \"Purple (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(270, 90%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    hsl_magenta: {\n        title: \"Magenta (HSL)\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                ctx.fillStyle = `hsl(310, 90%, ${percentage * 100}%)`;\n            };\n        } \n    },\n    greyscale: {\n        title: \"Greyscale\",\n        getColorScheme: (ctx) => {\n            return (percentage) => {\n                let comp = (255 * percentage);\n                ctx.fillStyle = `rgb(${comp}, ${comp}, ${comp})`;\n            };\n        }\n    }\n}","import colorSchemes from \"./color_schemes\";\n\nfunction getMandelbrotSetPercentage(numIterations, x, y) {\n    let resultReal = x;\n    let resultImag = y;\n    for (let i=0; i<numIterations; i++) {\n        const tempReal = (resultReal * resultReal - resultImag * resultImag + x);\n        const tempImag = (2 * resultReal * resultImag + y);\n        resultReal = tempReal;\n        resultImag = tempImag;        \n\n        if (resultReal * resultImag > 5) {\n            return (i / numIterations);\n        }\n    }\n\n    return 0;\n}\n\nexport default function draw(canvasEl, config, callback) {\n    console.log(\"Draw\");\n    const infoPaneEl = document.getElementById(\"info-pane\");\n\n    canvasEl.className = \"loading\";\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    \n    \n\n    const scheme = config.scheme;\n    const numIterations = config.numIterations;\n\n    const ctx = canvasEl.getContext(\"2d\", {\n        alpha: false\n    });\n    const styleFn = colorSchemes[scheme].getColorScheme(ctx);\n\n    const renderStart = Date.now();\n\n    // Fill with blank color.\n    if (config.clear) {\n        // Adjust canvas size.\n        canvasEl.width = width;\n        canvasEl.height = height;\n\n        ctx.fillStyle = \"#00000\";\n        ctx.fillRect(0, 0, width, height);\n    }\n\n    const magnificationFactor = config.magnificationFactor;\n    const panX = config.panX;\n    const panY = config.panY;    \n    \n    const stepSize = 10;\n\n    function setInfoPanel(rows) {\n        infoPaneEl.innerHTML = rows.join(\"<br/>\");\n    }\n\n    function displayLoadingInfo(progress) {\n        setInfoPanel([\n            `Rendering Mandelbrot Set...`,\n            `${Math.round(progress * 100)}%`\n        ]);\n    }\n    \n    function displayLoadedInfo() {\n        const firstX = (0 / magnificationFactor - panX);\n        const firstY = (0 / magnificationFactor - panY);\n        const lastX = (width / magnificationFactor - panX);\n        const lastY = (height / magnificationFactor - panX);\n        const timeSpent = Date.now() - renderStart;\n    \n        setInfoPanel([\n            `Viewport size: ${width}x${height}`,\n            `Magnification factor: ${magnificationFactor.toFixed(2)}`,\n            `Pan: (${panX.toFixed(4)}, ${panY.toFixed(4)})`,\n            `Abs. coords: (${firstX.toFixed(4)} ${firstY.toFixed(4)}) (${lastX.toFixed(4)} ${lastY.toFixed(4)})`,\n            `Render time: ${timeSpent} ms`\n        ]);\n    }\n\n    const lastStepY = stepSize * (Math.floor(height / stepSize) - 1);\n    let finished = false;\n\n    for (let baseY = 0; baseY < height; baseY += stepSize) {\n        setTimeout(() => {\n            for (let y = baseY; y < baseY + stepSize; y++) {\n                for (let x=0; x < width; x++) {\n                    const absX = (x / magnificationFactor - panX);\n                    const absY = (y / magnificationFactor - panY);\n                    const percentage = getMandelbrotSetPercentage(numIterations, absX, absY);\n                    styleFn(percentage);\n                    ctx.fillRect(x, y, 1, 1);\n                }\n\n                if (finished) {\n                    return;\n                }\n\n                // Check if drawing finished.\n                if (y >= lastStepY) {\n                    canvasEl.className = \"\";\n                    displayLoadedInfo();\n                    callback();\n                    finished = true;\n                } else {\n                    const progress = (baseY / height);\n                    displayLoadingInfo(progress);                    \n                }\n            }\n        }, 0);\n    }\n    \n    displayLoadingInfo(0);\n}","import colorSchemes from \"./color_schemes\";\nimport initializeSelection from \"./selection\";\n\nconst MAGNIFICATION_DEFAULT = 250;\nconst MAGNIFICATION_STEP = 50;\nconst MAGNIFICATION_PAN_STEP = 0.2;\nconst PAN_DEFAULT_X = 2;\nconst PAN_DEFAULT_Y = 1.5;\n\nexport default function initializeConfigPane(config) {    \n    const canvasEl = config.canvasEl;\n    const colorSchemeEl = document.getElementById(\"color-scheme\");\n    const zoomInEl = document.getElementById(\"zoom-in\");\n    const zoomOutEl = document.getElementById(\"zoom-out\");\n    const zoomResetEl = document.getElementById(\"zoom-reset\");\n    const selectionEl = document.getElementById(\"selection\");\n    const numIterationsValueEl = document.getElementById(\"num-iterations-value\");\n    const numIterationsButtonEl = document.getElementById(\"num-iterations-button\");\n\n    const drawConfig = {\n        numIterations: 100,\n        magnificationFactor: MAGNIFICATION_DEFAULT,\n        panX: PAN_DEFAULT_X,\n        panY: PAN_DEFAULT_Y,\n        scheme: \"hsl_blue\",\n        clear: true\n    }\n\n    function redraw() {\n        const numIterations = drawConfig.numIterations;\n\n        setTimeout(() => {\n            drawConfig.clear = true;\n            drawConfig.numIterations = 50;\n            config.draw(canvasEl, drawConfig, () => {\n                drawConfig.numIterations = numIterations;\n                drawConfig.clear = false;\n                config.draw(canvasEl, drawConfig, () => {});\n            });\n        }, 0);\n    }\n\n    function setColorSchemes() {\n        const currentScheme = drawConfig.scheme;\n        colorSchemeEl.innerHTML = \"\";\n\n        for (const colorScheme of Object.keys(colorSchemes)) {            \n            const optionEl = document.createElement(\"option\");\n            optionEl.innerText = colorSchemes[colorScheme].title;\n            optionEl.value = colorScheme;\n            optionEl.selected = (colorScheme === currentScheme);\n\n            colorSchemeEl.appendChild(optionEl);\n        }\n    }    \n\n    function onColorSchemeChange(e) {\n        const scheme = e.target.value;\n        drawConfig.scheme = scheme;\n        redraw();\n    }\n\n    initializeSelection(canvasEl, selectionEl, (data) => {\n        const magnificationFactor = drawConfig.magnificationFactor;\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const panY = drawConfig.panY;\n\n        const actX = (data.x * magnificationFactor - drawConfig.panX);\n        const actY = (data.y * magnificationFactor - drawConfig.panY);\n\n        const actWidth = (data.width * magnificationFactor);        \n        const fact = (actX + actWidth) / actX;\n\n        drawConfig.panX -= (data.x / magnificationFactor);\n        drawConfig.panY -= (data.y / magnificationFactor);\n        drawConfig.magnificationFactor += magnificationFactor * fact;\n        redraw();\n    });\n\n    // Populate with data.\n    setColorSchemes();    \n    numIterationsValueEl.value = drawConfig.numIterations;\n\n    // Listen for event changes.\n    colorSchemeEl.onchange = onColorSchemeChange;\n    \n    zoomInEl.onclick = () => {\n        drawConfig.magnificationFactor += MAGNIFICATION_STEP;\n        drawConfig.panX += 0;\n        drawConfig.panY += 0;\n        redraw();\n    }\n\n    zoomOutEl.onclick = () => {\n        drawConfig.magnificationFactor -= MAGNIFICATION_STEP;\n        drawConfig.panX -= MAGNIFICATION_PAN_STEP;\n        drawConfig.panY -= MAGNIFICATION_PAN_STEP;\n        redraw();\n    }\n\n    zoomResetEl.onclick = () => {\n        drawConfig.magnificationFactor = MAGNIFICATION_DEFAULT;\n        drawConfig.panX = PAN_DEFAULT_X;\n        drawConfig.panY = PAN_DEFAULT_Y;\n        redraw();\n    }\n\n    numIterationsButtonEl.onclick = (e) => {\n        const numIterations = parseInt(numIterationsValueEl.value, 10);\n        if (numIterations > 0) {\n            drawConfig.numIterations = numIterations;\n            redraw();\n        }\n    };\n\n    // Do a first draw.\n    redraw();\n}","const DRAG_MIN_WIDTH = 30;\nconst DRAG_MIN_HEIGHT = 30;\n\nexport default function initializeSelection(canvasEl, selectionEl, callback) {\n    let isHolding = false;\n    let originX;\n    let originY;\n\n    let selectionVisible = false;\n    let selectionX = 0;\n    let selectionY = 0;\n    let selectionWidth = 0;\n    let selectionHeight = 0;\n\n    function updateStyle() {\n        if (!isHolding) {\n            if (selectionVisible) {\n                selectionEl.style.display = \"hidden\";\n            }\n\n            return;\n        }\n\n        if (!selectionVisible) {\n            selectionEl.style.display = \"block\";\n        }\n\n        selectionEl.style.left = `${selectionX}px`;\n        selectionEl.style.top = `${selectionY}px`;\n        selectionEl.style.width = `${selectionWidth}px`;\n        selectionEl.style.height = `${selectionHeight}px`;\n    }\n\n    function getPointerPosition(e) {\n        if (e.clientX && e.clientY) {\n            return {\n                x: e.clientX,\n                y: e.clientY\n            }\n        }\n\n        if (e.targetTouches && e.targetTouches.length > 0) {\n            return {\n                x: e.targetTouches[0].clientX,\n                y: e.targetTouches[0].clientY\n            }\n        }\n\n        return null;\n    }\n\n    function onPointerDown(e) {\n        const { x, y } = getPointerPosition(e);\n        \n        isHolding = true;\n        selectionX = x;\n        selectionY = y;\n        selectionWidth = 0;\n        selectionHeight = 0;\n        updateStyle();\n\n        originX = x;\n        originY = y;\n    }\n    \n    function onPointerMove(e) {\n        e.preventDefault();\n\n        if (!isHolding) {\n            return;\n        }\n\n        const { x, y } = getPointerPosition(e);\n\n        if (x >= originX) {\n            const deltaX = (x - originX);\n            selectionX = originX;\n            selectionWidth = deltaX;\n        } else {\n            const deltaX = (originX - x);\n            selectionX = x;\n            selectionWidth = deltaX;\n        }     \n\n        if (y >= originY) {\n            const deltaY = (y - originY);\n            selectionY = originY;\n            selectionHeight = deltaY;\n        } else {\n            const deltaY = (originY - y);\n            selectionY = y;\n            selectionHeight = deltaY;\n        }\n\n        updateStyle();\n    }\n\n    function onPointerUp(e) {\n        selectionEl.style.display = \"none\";\n        isHolding = false;\n        updateStyle();\n\n        if (selectionWidth >= DRAG_MIN_WIDTH && selectionHeight >= DRAG_MIN_HEIGHT) {\n            callback({\n                x: selectionX,\n                y: selectionY,\n                width: selectionWidth,\n                height: selectionHeight\n            });\n        }\n    }\n\n    canvasEl.addEventListener(\"mousedown\", onPointerDown);\n    canvasEl.addEventListener(\"mousemove\", onPointerMove);\n    canvasEl.addEventListener(\"mouseup\", onPointerUp);\n\n    canvasEl.addEventListener(\"touchstart\", onPointerDown);\n    canvasEl.addEventListener(\"touchmove\", onPointerMove, { passive: false });\n    canvasEl.addEventListener(\"touchend\", onPointerUp);\n}","import draw from \"./lib/drawing\";\nimport initializeConfigPane from \"./lib/config_pane\";\n\nconst canvasEl = document.getElementById(\"drawing\");\ninitializeConfigPane({\n    canvasEl,\n    draw\n});"],"names":["hsl_red","title","getColorScheme","ctx","percentage","fillStyle","hsl_green","hsl_cyan","hsl_blue","hsl_purple","hsl_magenta","greyscale","comp","$0c7e0cee1c3848bba822eb831a16164e$var$getMandelbrotSetPercentage","numIterations","x","y","resultReal","resultImag","i","tempImag","config","canvasEl","colorSchemeEl","document","getElementById","zoomInEl","zoomOutEl","zoomResetEl","selectionEl","numIterationsValueEl","numIterationsButtonEl","drawConfig","magnificationFactor","panX","panY","scheme","clear","redraw","setTimeout","draw","callback","originX","originY","isHolding","selectionX","selectionY","selectionWidth","selectionHeight","updateStyle","style","display","left","top","width","height","getPointerPosition","e","clientX","clientY","targetTouches","length","onPointerDown","onPointerMove","preventDefault","onPointerUp","addEventListener","passive","data","actX","window","innerWidth","innerHeight","fact","currentScheme","innerHTML","colorScheme","Object","keys","optionEl","createElement","innerText","value","selected","appendChild","setColorSchemes","onchange","target","onclick","parseInt","console","log","infoPaneEl","className","getContext","alpha","styleFn","renderStart","Date","now","fillRect","setInfoPanel","rows","join","displayLoadingInfo","progress","Math","round","displayLoadedInfo","firstX","firstY","lastX","lastY","timeSpent","toFixed","lastStepY","floor","finished","baseY"],"version":3,"file":"index.61e15522.js.map"}